interface Config {
    name: string;
    verbose: boolean;
    type: string;
    language: string;
    useNpm: boolean;
    usePnp: boolean;
    appType: string;
    checkAppNames: string[];
    templatePackageName: string;
}
export declare function generateProject({ name, type, language, useNpm, usePnp, verbose, appType, checkAppNames, templatePackageName, }: Config): void;
export declare function run(templatePackageName: string, root: string, appName: string, verbose: boolean, originalDirectory: string, template: string, useYarn: boolean, usePnp: boolean): Promise<void>;
export declare function removeTemplatePackage(templateName: string, useYarn: boolean): void;
export declare function checkNodeVersion(useTypeScript: boolean): void;
export declare function checkAppName(appName: string, dependencies: string[]): void;
export declare function isSafeToCreateProjectIn(root: string, name: string): boolean;
export declare function shouldUseYarn(): boolean;
export declare function checkThatNpmCanReadCwd(): boolean;
export declare function checkNpmVersion(): {
    hasMinNpm: boolean;
    npmVersion: any;
};
export declare function checkYarnVersion(): {
    hasMinYarnPnp: boolean;
    yarnVersion: any;
};
export declare function checkIfOnline(useYarn: boolean): Promise<boolean>;
export declare function install(root: string, useYarn: boolean, usePnp: boolean, dependencies: string[], verbose: boolean, isOnline: boolean, isDev: boolean): Promise<unknown>;
export {};
//# sourceMappingURL=index.d.ts.map